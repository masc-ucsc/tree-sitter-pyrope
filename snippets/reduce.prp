
reduce = {|bundle, x1, x2|
  var op
  var base
  if x1 equals :{|| nil} {
     op   = x1
     base = x2
  }elif x2 equals :{|| nil} {
     op   = x2
     base = x1
  }else{
     comptime assert false, "unclear method to apply a reduction"
  }

  var x = base
  for i in bundle {
    x = op(x, i)
  }
  ret x
}

reduce = {|bundle, x1|

  ret reduce(bundle,0,x1) when x1 equals :{||}

  comptime assert false, "unclear method to apply a reduction"
}

/// xargs converts from UFCS to append first tuple to end
/// Orig:
///  (3,4) |> xargs(1,2) |> foo
/// Becomes:
///  foo(1,2,3,4)
///
///  (3,4) |> foo(1,2) is the same as foo((3,4),1,2)
///

let echo  = {|(...x)| ret x }
let xargs = {|(a,...x)| ret x ++ a }

let a = (1,2,3).reduce(0, '+')
let b = __sum(A=(1,2,3))
assert b == a == (1+2+3)

let c1 = (1,2) |> echo(3)
let c2 = (1,2) |> xargs(3)
assert c1 == (3,1,2)
assert c2 == (1,2,3)

