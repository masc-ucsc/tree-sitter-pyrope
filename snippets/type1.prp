
 //-------------
 type color = RED or BLUE or GREEN // enum just a unique ID

 var x:color = RED // only in local module
 assert x == RED

 puts "color:{} {}\n", :x, x // prints "color:RED RED"

 //-------------
type Shape = (
  ,var name = {|(self) -> :string|}
  ,var area = {|(self) -> :i32|}
  ,var increase_size = {|(self,_:i12) -> (self)|}
)

type Circle extends Shape with (
  ,var rad:i32
  ,var name = {|(self) -> :string| "circle" }
  ,var area = {|(self) -> :i32|
     let pi = import("math.pi")
     ret pi * self.rad * self.rad
  }
  ,var increase_size = {|(self,_:i12) -> (self)|  self.rad *= $1 }
)

let add1 = {|a,b| // 1 cycle add
  reg r
  let orig = r
  r = a+b
  ret orig
}
let mul3 = {|a,b| // 3 cycle multiply
  reg r1,r2,r3
  let orig = r4

  r3 = r2
  r2 = r1
  r1 = a * b
  ret orig
}

x    =# mul3(in1, in2)
%out =# add1(x,in3)

// Design one
let x = mul3(in1, in2)      // compile error: 'mul3' is pipelined
let x =# mul3(in1, in2)     // OK
%out  =# add1(x,in3)        // OK (in3 has 0 cycles, x has 3 cycles)
%out  =#[1] add1(x,in3)     // compile error: 'x' is pipelined with '3' cycles
%out  =#[3] add1(x,in3)     // compile error: 'in3' is pipelined with '1' cycle
%out  =#[1..<4] add1(x,in3) // OK


var a:u32=100
var b:u10
var c:u5
var d:u5

b = a     // OK done automatically. No precision lost
c = a     // compile error, '100' overflows the maximum allowed value of 'c'
wrap c = a     // OK, same as c = a@[0..<5] (Since 100 is 0b1100100, c==4)
c = u5(a) // OK, c == 31
c = 31
d = c + 1 // compile error, '32' overflows the maximum allowed value  of 'd'
wrap d= c + 1   // OK d == 0
wrap d=# c + 1   // OK d == 0
saturate d:u5 = c+1 // OK, d==31
saturate d = c+1 // OK, d==31
