

let A = (
  ,pub x:string
  ,pub set = fun (x)->(self) {
    self.x = x + "A"
  }
)

let B_same_as_A = (
  ,pub x:string
  ,pub set = fun (self,x)->(self) {
    self.x = x + "B"
  }
)

comptime assert A equals B_same_as_A   // same fields in tuple, and each field has same type

var funA = fun(x:A) { ret x.x }

comptime assert funA(A("aa")) == "aaA"
comptime assert funA(B("bb")) == "bbB"

funA ++= fun (x:B) { assert false }

comptime assert funA(B("bb")) == "bbB"  // funA is earlier in the list and satisfies the overloading
