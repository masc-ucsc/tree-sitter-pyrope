

let A = (
  ,pub x:string
  ,pub set = {|(self,x)->(self)|
    self.x = x + "A"
  }
)

let B_same_as_A = (
  ,pub x:string
  ,pub set = {|(self,x)->(self)|
    self.x = x + "B"
  }
)

comptime assert A equals B_same_as_A   // same fields in tuple, and each field has same type

var funA = {|(x:A)| x.x }

comptime assert funA(A("aa")) == "aaA"
comptime assert funA(B("bb")) == "bbB"

funA ++ {|(x:B)| "never_called" }

comptime assert funA(B("bb")) == "bbB"  // funA is earlier in the list and satisfies the overloading
