

// encoder

a = 1<<val

// decoder

decoder = fun (num) {
  let clog2 = import('math.clog2')

  // For a 8 bit one hot encoding, we could
  // out@[2] = a in (4,5,6,7)
  // out@[1] = a in (2,3,6,7)
  // out@[0] = a in (1,3,5,7)

  var out = 0
  // This is the configurable size decoder
  for i in 0..<clog2(num.__ubits) {
     delta=i+1
     pos = 0
     xset = 0sb?
     while pos<num.__ubits {
        pos += delta
        for j in pos..<(pos+i) {
          xset ++= j
        }
     }
     out@[i] = num@|[set]
  }
  ret out
}

test "trivial" {
  for i in 0..=33 {
    assert decoder(1<<i) == i
  }
}

test "one_hot_encoder" {
  // Pyrope 1
  let result = match sel {
    == 0b00 { 0b0001 }
    == 0b01 { 0b0010 }
    == 0b10 { 0b0100 }
    == 0b11 { 0b1000 }
  }

  // Pyrope 2
  let table = (1,2,4,8)
  cassert result == table[sel]

  // Pyrope 3
  cassert result == 1<<sel
}

