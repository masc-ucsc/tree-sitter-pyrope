
_find_one = (

  ,setter = fun (x) {
    return pick(x)
  }

  ,pick = fun (x:u4)->(pos:u2,found:boolean) {
    return match x {
      == 0b1??? { (3  ,true ) }
      == 0b01?? { (2  ,true ) }
      == 0b001? { (1  ,true ) }
      == 0b0001 { (0  ,true ) }
      == 0b0000 { (0b?,false) }
    }
  } ++ fun (x:u3)->(pos:u2,found:boolean) {
    match x {
      == 0b1?? { return (2,true) }
      == 0b01? { return (1,true) }
      == 0b001 { return (0,true) }
      == 0b000 { return (0b?,false) }
    }
  } ++ fun (x:u2)->(pos:u2,found:boolean) {
    return match x {
      == 0b1? { (1  ,true ) }
      == 0b01 { (0  ,true ) }
      == 0b00 { (0b?,false) }
    }
  } ++ fun (x:u1)->(pos:u1,found:boolean) {
    return (0, x)
  } ++ fun (x)->(pos,found:boolean) {
    let list = pick(x[i..+4]) for i in range(0,to=x.__ubits,by=4)

    for (index,e) in list.enumerate() {
      return (pos=(i*4) | e.pos, found=true) when e.found
    }

    return (pos=0,found=false)
  }
)

let freelist = (
  ,top
  ,empty:bool

  ,pop = proc(ref self)->(self) {
    f = _find_one(self.bitmask)

    self.empty = !f.found
    self.top   =  f.pos

    self.bitmask@[f.pos] = false
  }

  ,push = proc(ref self, free)->(self) {
    assert !self.bitmask@[free]

    if empty {
      self.top = free
      return
    }

    self.bitmask@[free] = true
  }

  ,mask_push = fun (self, mask)->(self) {

    assert 0 == (self.bitmask & mask)

    self.bitmask |= mask
    if empty {
      f <- find_one(mask)

      self.empty = !f.found
      self.top   =  f.pos

      self.bitmask@[f.pos] = false
    }
  }

  ,set = fun (self,initmask)->(self) {
     self.bitmask = initmask
     pop() // To populate top
  }
)
